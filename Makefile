#
#   PHP-CPP Makefile
#
#   This makefile has a user friendly order: the top part of this file contains
#   all variable settings that you may alter to suit your own system, while at
#   the bottom you will find instructions for the compiler in which you will
#   probably not have to make any changes
#

#
#   Php-config utility
#
#   PHP comes with a standard utility program called 'php-config'. This program
#   can be used to find out in which directories PHP is installed. Inside this
#   makefile this utility program is used to find include directories, shared
#   libraries and the path to the binary file. If your php-config is not
#   installed in the default directory, you can change that here.
#

PHP_CONFIG                = php-config
UNAME                    := $(shell uname)

#
#   Installation directory
#
#   When you install the PHP-CPP library, it will place a number of C++ *.h
#   header files in your system include directory, and a libphpcpp.so shared
#   library file in your system libraries directory. Most users set this to
#   the regular /usr/include and /usr/lib directories, or /usr/local/include
#   and /usr/local/lib. You can of course change it to whatever suits you best
#

# Since OSX 10.10 Yosemite, /usr/include gives problem
# So, let's switch to /usr/local as default instead.
ifeq ($(UNAME), Darwin)
  INSTALL_PREFIX          = /usr/local
else
  INSTALL_PREFIX          = /usr
endif

DESTDIR_HEADERS           = $(INSTALL_PREFIX)/include
DESTDIR_LIB               = $(INSTALL_PREFIX)/lib


#
#   SONAME and version
#
#   When ABI changes, soname and minor version of the library should be raised.
#   Otherwise only release verions changes. (version is MAJOR.MINOR.RELEASE)
#

SONAME                    = 2
VERSION                   = 2.0.0


#
#   Name of the target library name and config-generator
#
#   The PHP-CPP library will be installed on your system as libphpcpp.so.
#   This is a brilliant name. If you want to use a different name for it,
#   you can change that here.
#

PHP_SHARED_LIBRARY_BASE   = libphpcpp.so
PHP_SHARED_LIBRARY_SONAME = $(PHP_SHARED_LIBRARY_BASE).$(SONAME)
PHP_SHARED_LIBRARY        = $(PHP_SHARED_LIBRARY_BASE).$(VERSION)
PHP_STATIC_LIBRARY        = libphpcpp.a


#
#   Compiler
#
#   By default, the GNU C++ compiler is used. If you want to use a different
#   compiler, you can change that here. You can change this for both the
#   compiler (the program that turns the c++ files into object files) and for
#   the linker (the program that links all object files into a single .so
#   library file. By default, g++ (the GNU C++ compiler) is used for both.
#

#
#   Compiler flags
#
#   This variable holds the flags that are passed to the compiler. By default,
#   we include the -O2 flag. This flag tells the compiler to optimize the code,
#   but it makes debugging more difficult. So if you're debugging your application,
#   you probably want to remove this -O2 flag. At the same time, you can then
#   add the -g flag to instruct the compiler to include debug information in
#   the library (but this will make the final libphpcpp.so file much bigger, so
#   you want to leave that flag out on production servers).
#

CXXFLAGS_EXTRA            = -Wall -fvisibility=hidden -fvisibility-inlines-hidden
CPPFLAGS_EXTRA            = -std=c++11 -DBUILDING_PHPCPP $(shell $(PHP_CONFIG) --includes)

#
#   Linker flags
#
#   Just like the compiler, the linker can have flags too. The default flag
#   is probably the only one you need.
#
#   Are you compiling on OSX? You may have to append the option "-undefined dynamic_lookup"
#   to the linker flags
#

LDFLAGS_EXTRA             = -shared $(shell $(PHP_CONFIG) --ldflags) -Wl,-soname,libphpcpp.so.$(SONAME)

#
#   Command to remove files, copy files, link files and create directories.
#
#   I've never encountered a *nix environment in which these commands do not work.
#   So you can probably leave this as it is
#

RM                        = rm -f
CP                        = cp -f
LN                        = ln -f -s
MKDIR                     = mkdir -p


#
#   The source files
#
#   For this we use a special Makefile function that automatically scans the
#   common/ and zend/ directories for all *.cpp files. No changes are
#   probably necessary here
#

COMMON_SOURCES            = $(wildcard common/*.cpp)
PHP_SOURCES               = $(wildcard zend/*.cpp)
HEADERS                   = $(wildcard include/*.h)

#
#   The object files
#
#   The intermediate object files are generated by the compiler right before
#   the linker turns all these object files into the libphpcpp.so shared
#   library. We also use a Makefile function here that takes all source files.
#

COMMON_SHARED_OBJECTS     = $(COMMON_SOURCES:%.cpp=shared/%.o)
PHP_SHARED_OBJECTS        = $(PHP_SOURCES:%.cpp=shared/%.o)
COMMON_STATIC_OBJECTS     = $(COMMON_SOURCES:%.cpp=static/%.o)
PHP_STATIC_OBJECTS        = $(PHP_SOURCES:%.cpp=static/%.o)

OBJECTS                   = $(COMMON_SHARED_OBJECTS) $(PHP_SHARED_OBJECTS) $(COMMON_STATIC_OBJECTS) $(PHP_STATIC_OBJECTS) 
SOURCE_DEPS               = $(patsubst %.o,%.d,$(OBJECTS))


#
#   End of the variables section. Here starts the list of instructions and
#   dependencies that are used by the compiler.
#

all: CXXFLAGS_EXTRA += -g
all: phpcpp

release: CXXFLAGS_EXTRA += -O2
release: phpcpp

phpcpp: $(PHP_SHARED_LIBRARY_BASE) $(PHP_STATIC_LIBRARY)
	@echo
	@echo "Build complete."

$(PHP_SHARED_LIBRARY_BASE): $(PHP_SHARED_LIBRARY_SONAME)
	$(LN) "$^" "$@"

$(PHP_SHARED_LIBRARY_SONAME): $(PHP_SHARED_LIBRARY)
	$(LN) "$^" "$@" 

$(PHP_SHARED_LIBRARY): $(COMMON_SHARED_OBJECTS) $(PHP_SHARED_OBJECTS)
	$(CXX) $(LDFLAGS) $(LDFLAGS_EXTRA) $^ $(LDLIBS) -o "$@"

$(PHP_STATIC_LIBRARY): $(COMMON_STATIC_OBJECTS) $(PHP_STATIC_OBJECTS)
	$(AR) rcs $@ $^

shared_directories: shared/common shared/zend
static_directories: static/common static/zend
shared/common shared/zend static/common static/zend:
	$(MKDIR) $@

clean:
	$(RM) $(PHP_SHARED_LIBRARY_BASE) $(PHP_SHARED_LIBRARY_SONAME) $(PHP_SHARED_LIBRARY) $(PHP_STATIC_LIBRARY) $(OBJECTS)
	-$(RM) shared/common shared/zend static/common static/zend shared static

clean: clean-deps

clean-deps:
	-$(RM) $(SOURCE_DEPS)

ifeq (,$(findstring clean,$(MAKECMDGOALS)))
-include $(SOURCE_DEPS)
endif

static/%.o: %.cpp | static_directories
	$(CXX) -c "$<" $(CPPFLAGS) $(CPPFLAGS_EXTRA) $(CXXFLAGS) $(CXXFLAGS_EXTRA) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$@" -MT"$(@:%.o=%.d)" -o "$@"

shared/%.o: %.cpp | shared_directories
	$(CXX) -c "$<" $(CPPFLAGS) $(CPPFLAGS_EXTRA) $(CXXFLAGS) $(CXXFLAGS_EXTRA) -fpic -MMD -MP -MF"$(@:%.o=%.d)" -MT"$@" -MT"$(@:%.o=%.d)" -o "$@"

# The if statements below must be seen as single line by make

install:
	$(MKDIR) "$(DESTDIR_HEADERS)/phpcpp"
	$(MKDIR) "$(DESTDIR_LIB)"
	$(CP) phpcpp.h "$(DESTDIR_HEADERS)"
	$(CP) $(HEADERS) "$(DESTDIR_HEADERS)/phpcpp/"
	if [ -e $(PHP_SHARED_LIBRARY) ]; then \
		$(CP) $(PHP_SHARED_LIBRARY) "$(DESTDIR_LIB)/"; \
		$(LN) "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY)" "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY_SONAME)"; \
		$(LN) "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY_SONAME)" "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY_BASE)"; \
	fi
	if [ -e $(PHP_STATIC_LIBRARY) ]; then \
		$(CP) $(PHP_STATIC_LIBRARY) "$(DESTDIR_LIB)/"; \
	fi
	if `which ldconfig`; then \
		sudo ldconfig; \
	fi

uninstall:
	$(RM) "$(DESTDIR_HEADERS)/phpcpp.h"
	$(RM) $(addprefix $(DESTDIR_HEADERS)/ $(notdir $(HEADERS)))
	$(RM) "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY)" "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY_BASE)" "$(DESTDIR_LIB)/$(PHP_SHARED_LIBRARY_SONAME)"
	-$(RM) "$(DESTDIR_HEADERS)/phpcpp.h"

.PHONY: shared_directories static_directories clean clean-deps install uninstall all release phpcpp
